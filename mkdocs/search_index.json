{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Introduction\n\n\nmsm-lite: C++14 Meta State Machine Library\n\n\n\n\nYour scalable C++14 header only eUML-like meta state machine library with no dependencies\n\n\n\n\nUML State Machine\n\n\n\n\nState Machine\n\n\nUML2 Specification\n\n\nBoost.MSM - eUML\n\n\n\n\nWhy msm-lite?\n\n\n\n\nBoost.MSM - eUML\n is awesome, however it has a few huge limitations which stop it from being used it on a larger scale;\n  msm-lite, therefore, is trying to address those issues.\n\n\n\n\nProblems with Boost.MSM - eUML\n\n\n\n\nHorrible compilation times (see \nPerformance\n)\n\n\nProduces huge binaries (see \nPerformance\n)\n\n\nBased on too many macros\n\n\nHorrible and long error messages (see \nError Messages\n)\n\n\nSometimes hard to follow as not all actions might be seen on transition table (ex. initial states, on_entry, on_exit)\n\n\nA lot of boilerplate code with actions/guards (requires fsm, event, source state, target state)\n\n\nData in states makes it harder share/encapsulate (UML compliant though)\n\n\nFunctional programming emulation\n\n\nHuge complexity may overwhelm in the beginning\n\n\nA lot of Boost dependencies\n\n\n\n\nmsm-lite design goals\n\n\n\n\n\n\nKeep the Boost.MSM - eUML goodies\n\n\n\n\nPerformance (see \nPerformance\n)\n\n\nMemory usage (see \nPerformance\n)\n\n\neUML DSL (s1 == s2 + event [ guard ] / action)\n\n\nUML standard compliant (As much as possible)\n\n\n\n\n\n\n\n\nEliminate Boost.MSM - eUML problems\n\n\n\n\nCompilation times (see \nPerformance\n)\n\n\nBinary size (see \nPerformance\n)\n\n\nReduce complexity by eliminating less used features\n\n\nShort and informative error messages (see \nError Messages\n)\n\n\nLess boilerplate / no macros\n\n\nImprove visibility by having all actions on transition table\n\n\nNo dependencies / one header (1k lines)\n\n\nFunctional programming support using lamda expressions\n\n\n\n\n\n\n\n\nWhat 'lite' implies?\n\n\n\n\nMinimal learning curve\n\n\nOnly crucial features\n\n\nGuaranteed performance and quick compilation times\n\n\nNo dependencies\n\n\n\n\nSupported UML features by msm-lite\n\n\n\n\nTransitions / Internal transitions / Anonymous transitions / No transition (see \nTransitions\n)\n\n\nActions / Guards (see \nAction/Guards\n)\n\n\nState entry / exit actions (see \nStates\n)\n\n\nOrthogonal regions (see \nOrthogonal Regions\n)\n\n\nSub / Composite state machines (see \nComposite\n)\n\n\n\n\nAdditional features\n\n\n\n\nRuntime Dispatcher (see \nRuntime Dispatcher\n)\n\n\nDependency Injection integration (see \nDI\n)", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#introduction", 
            "text": "msm-lite: C++14 Meta State Machine Library   Your scalable C++14 header only eUML-like meta state machine library with no dependencies   UML State Machine   State Machine  UML2 Specification  Boost.MSM - eUML   Why msm-lite?   Boost.MSM - eUML  is awesome, however it has a few huge limitations which stop it from being used it on a larger scale;\n  msm-lite, therefore, is trying to address those issues.   Problems with Boost.MSM - eUML   Horrible compilation times (see  Performance )  Produces huge binaries (see  Performance )  Based on too many macros  Horrible and long error messages (see  Error Messages )  Sometimes hard to follow as not all actions might be seen on transition table (ex. initial states, on_entry, on_exit)  A lot of boilerplate code with actions/guards (requires fsm, event, source state, target state)  Data in states makes it harder share/encapsulate (UML compliant though)  Functional programming emulation  Huge complexity may overwhelm in the beginning  A lot of Boost dependencies   msm-lite design goals    Keep the Boost.MSM - eUML goodies   Performance (see  Performance )  Memory usage (see  Performance )  eUML DSL (s1 == s2 + event [ guard ] / action)  UML standard compliant (As much as possible)     Eliminate Boost.MSM - eUML problems   Compilation times (see  Performance )  Binary size (see  Performance )  Reduce complexity by eliminating less used features  Short and informative error messages (see  Error Messages )  Less boilerplate / no macros  Improve visibility by having all actions on transition table  No dependencies / one header (1k lines)  Functional programming support using lamda expressions     What 'lite' implies?   Minimal learning curve  Only crucial features  Guaranteed performance and quick compilation times  No dependencies   Supported UML features by msm-lite   Transitions / Internal transitions / Anonymous transitions / No transition (see  Transitions )  Actions / Guards (see  Action/Guards )  State entry / exit actions (see  States )  Orthogonal regions (see  Orthogonal Regions )  Sub / Composite state machines (see  Composite )   Additional features   Runtime Dispatcher (see  Runtime Dispatcher )  Dependency Injection integration (see  DI )", 
            "title": "Introduction"
        }, 
        {
            "location": "/overview/index.html", 
            "text": "Quick Start\n\n\n\n\nGet \nboost/msm/msm.hpp\n header\n\n\n\n\n    wget https://raw.githubusercontent.com/boost-experimental/msm-lite/master/include/boost/msm/msm.hpp\n\n\n\n\n\n\nInclude the header\n\n\n\n\n    #include \nboost/msm/msm.hpp\n\n\n\n\n\n\n\nCompile with C++14 support\n\n\n\n\n    $CXX -std=c++14 ...\n\n\n\n\nDependencies\n\n\n\n\nmsm-lite has no external dependencies (no STL, no Boost)\n\n\n\n\nSupported/tested compilers\n\n\n\n\nClang-3.4+\n\n\nGCC-5.2+\n\n\n\n\nPerformance\n\n\n\n\n\n\n\n\nTest\n\n\nCXXFLAGS\n\n\nEvents\n\n\nStates\n\n\nTransitions\n\n\nProcess Events\n\n\n\n\n\n\n\n\n\n\nSimple Test\n\n\n-O2 -s\n\n\n6\n\n\n5\n\n\n12\n\n\n1'000'000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclang++-3.7\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.307s\n\n\n3.855s\n\n\n1.061s\n\n\n\n\n\n\nExecution time\n\n\n15ms\n\n\n17ms\n\n\n1232ms\n\n\n\n\n\n\nMemory usage\n\n\n14b\n\n\n32b\n\n\n200b\n\n\n\n\n\n\nExecutable size\n\n\n11K\n\n\n91K\n\n\n59K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng++-6.0\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.386s\n\n\n7.879s\n\n\n1.790s\n\n\n\n\n\n\nExecution time\n\n\n15ms\n\n\n20ms\n\n\n929ms\n\n\n\n\n\n\nMemory usage\n\n\n14b\n\n\n32b\n\n\n224b\n\n\n\n\n\n\nExecutable size\n\n\n11K\n\n\n67K\n\n\n63K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\nCXXFLAGS\n\n\nEvents\n\n\nStates\n\n\nTransitions\n\n\nProcess Events\n\n\n\n\n\n\n\n\n\n\nComposite Test\n\n\n-O2 -s\n\n\n8\n\n\n5 + 3\n\n\n12 + 4\n\n\n1'000 * 1'000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclang++-3.7\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.354s\n\n\n4.526s\n\n\n1.293s\n\n\n\n\n\n\nExecution time\n\n\n10ms\n\n\n14ms\n\n\n491ms\n\n\n\n\n\n\nMemory usage\n\n\n20b\n\n\n60b\n\n\n200b\n\n\n\n\n\n\nExecutable size\n\n\n15K\n\n\n111K\n\n\n83K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng++-6.0\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.446s\n\n\n9.363s\n\n\n2.037s\n\n\n\n\n\n\nExecution time\n\n\n9ms\n\n\n13ms\n\n\n404ms\n\n\n\n\n\n\nMemory usage\n\n\n20b\n\n\n60b\n\n\n224b\n\n\n\n\n\n\nExecutable size\n\n\n12K\n\n\n91K\n\n\n83K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\nCXXFLAGS\n\n\nEvents\n\n\nStates\n\n\nTransitions\n\n\nProcess Events\n\n\n\n\n\n\n\n\n\n\nComplex Test\n\n\n-O2 -s\n\n\n50\n\n\n50\n\n\n50\n\n\n1'000'000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclang++-3.7\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.778s\n\n\n1m15.935s\n\n\n3.661s\n\n\n\n\n\n\nExecution time\n\n\n70ms\n\n\n81ms\n\n\n6221ms\n\n\n\n\n\n\nMemory usage\n\n\n102b\n\n\n120b\n\n\n200b\n\n\n\n\n\n\nExecutable size\n\n\n35K\n\n\n611K\n\n\n343K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng++-6.0\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n1.020s\n\n\n52.238s\n\n\n4.997s\n\n\n\n\n\n\nExecution time\n\n\n72ms\n\n\n77ms\n\n\n5520ms\n\n\n\n\n\n\nMemory usage\n\n\n102b\n\n\n120b\n\n\n224b\n\n\n\n\n\n\nExecutable size\n\n\n35K\n\n\n271K\n\n\n215K\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\n\n\n\n\n\n\n\n\nHeader Test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclang++-3.7\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.060s\n\n\n2.072s\n\n\n0.552s\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng++-6.0\n\n\nmsm-lite\n\n\nboost.msm-eUML\n\n\nboost.statechart\n\n\n\n\n\n\n\n\n\n\nCompilation time\n\n\n0.073s\n\n\n3.197s\n\n\n0.704s\n\n\n\n\n\n\n\n\nError messages\n\n\nNot configurable\n\n\n\n\nNot callable\n\n\n\n\nNot transitional\n\n\n\n\nNot dispatchable", 
            "title": "Overview"
        }, 
        {
            "location": "/tutorial/index.html", 
            "text": "Boost.MSM - UML Short Guide\n\n\n\n\nBoost.MSM - eUML Documentation\n\n\n\n\n\n\nAPI reference\n\n\n\n\n\n\nnamespace msm {\n    template \nclass T\n // requires T to have T.configure()\n    class sm {\n    public:\n      using events; // list of supported events\n\n      template\nclass... TDeps\n // no requirements\n      explicit sm(TDeps\n...) noexcept; // action/guards dependencies\n      sm_impl(const sm \n) = delete;\n      sm_impl(sm \n) = default;\n\n      template \nclass TEvent\n // no requirements, returns whether event was handled or not\n      bool process_event(const TEvent \n) noexcept;\n\n      template \nclass TVisitor\n // requires TVisitor to be callable with auto\n      void visit_current_states(const TVisitor \n) const noexcept;\n\n      template \nclass TFlag\n // no requirements, returns whether active state has TFlag or not\n      bool is(const TFlag \n) const noexcept;\n    };\n\n    template \nclass... Ts\n // requires Ts to have Ts::src_state\n                           //                   , Ts::dst_state\n                           //                   , Ts::event\n                           //                   , Ts::deps\n                           //                   , Ts.execute(...)\n    auto make_transition_table(Ts...) noexcept;\n\n    action process_event;\n\n    template \nclass TEvent\n // no requirements\n    auto event{};\n\n    template \nclass T\n // no requirements\n    using state;\n\n    template \nclass T, T...\n\n    state\nT...\n operator\n_s(); // create a state, ex. \nidle\n_s\n\n    state initial;\n\n    template \nclass T\n // requires T to be callable and returns bool\n    auto operator!(const T \n) noexcept;\n\n    template \nclass T1, class T2\n // requires T1, T2 to be callable and returns bool\n    auto operator\n(const T1 \n, const T2 \n) noexcept;\n\n    template \nclass T1, class T2\n // requires T1, T2 to be callable and returns bool\n    auto operator||(const T1 \n, const T2 \n) noexcept;\n\n    template \nclass T1, class T2\n // requires T1, T2 to be callable\n    auto operator, (const T1 \nt1, const T2 \nt2) noexcept;\n}\n\n\n\n\n\n\nBoost.MSM - eUML vs msm-lite\n\n\n\n\n// Boost.MSM - eUML\n\n#include \nboost/msm/back/state_machine.hpp\n\n#include \nboost/msm/front/state_machine_def.hpp\n\n#include \nboost/msm/front/euml/euml.hpp\n\n\nnamespace msm = boost::msm;\nnamespace mpl = boost::mpl;\nusing namespace boost::msm::front::euml;\n\nBOOST_MSM_EUML_EVENT(open_close)\n\nBOOST_MSM_EUML_ACTION(open_drawer){\n    template \nclass FSM, class EVT, class SourceState, class TargetState\n\n    void operator()(EVT const \n, FSM \n, SourceState \n, TargetState \n){}\n};\n\nBOOST_MSM_EUML_ACTION(close_drawer){\n    template \nclass FSM, class EVT, class SourceState, class TargetState\n\n    void operator()(EVT const \n, FSM \n, SourceState \n, TargetState \n){}\n};\n\nBOOST_MSM_EUML_STATE((), Empty)\nBOOST_MSM_EUML_STATE((), Open)\n\nBOOST_MSM_EUML_TRANSITION_TABLE(\n    (\n     Open == Empty + open_close / open_drawer,\n     Empty == Open + open_close / close_drawer\n    ), transition_table\n)\n\nBOOST_MSM_EUML_ACTION(Log_No_Transition){\n    template \nclass FSM, class Event\n void operator()(Event const \n, FSM \n, int state){}};\n\nBOOST_MSM_EUML_DECLARE_STATE_MACHINE((transition_table,                            // STT\n                                      init_ \n Empty,                              // Init State\n                                      no_action,                                   // Entry\n                                      no_action,                                   // Exit\n                                      attributes_ \n no_attributes_,               // Attributes\n                                      configure_ \n no_exception \n no_msg_queue,  // configuration\n                                      Log_No_Transition                            // no_transition handler\n                                      ),\n                                     player_)  // fsm name\n\nint main() {\n    msm::back::state_machine\nplayer_\n sm;\n    sm.process_event(open_close);\n    sm.process_event(open_close);\n}\n\n\n\n\n// msm-lite\n\n#include \nmsm/msm.hpp\n\n\nstruct open_close {};\n\nauto open_drawer = [] {};\nauto close_drawer = [] {};\n\nstruct player {\n  auto configure() const noexcept {\n    using namespace msm;\n    return make_transition_table(\n        \nEmpty\n_s(initial) == \nOpen\n_s + event\nopen_close\n / open_drawer,\n        \nOpen\n_s == \nEmpty\n_s + event\nopen_close\n / close_drawer\n    );\n  }\n};\n\nint main() {\n  msm::sm\nplayer\n player;\n  player.process_event(open_close{});\n  player.process_event(open_close{});\n}\n\n\n\n\n\n\n\n\nmsm-lite DSL\n\n\n\n\n\n\n\n\nExpression\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc_state == dst_state + event\n [ guard \n (![]{return true;} \n guard2) ] / (action, action2, []{})\n\n\ntransition from src_state to dst_state on event e with guard and action\n\n\n\n\n\n\nsrc_state == dst_state + event\n [ guard ] / action\n\n\ntransition from src_state to dst_state on event e with guard and action\n\n\n\n\n\n\nsrc_state == dst_state / [] {}\n\n\nanonymous transition with action\n\n\n\n\n\n\nsrc_state == dst_state + event\n\n\ntransition on event e without guard or action\n\n\n\n\n\n\nstate + event\n [ guard ]\n\n\ninternal transition on event e when guard\n\n\n\n\n\n\n\n\n\n\n\n\nmsm-lite data dependencies\n\n\n\n\n\n\n                             /---- event\n                            |\nauto guard = [](double d, auto event) { return true; }\n                   |\n                   \\-------\\\n                           |\nauto action = [](int i){}  |\n                 |         |\n                 |         |\n            /---/  /------/\n           |      /\nsm\n...\n s{42, 87.0};\n\n\n\n\n\n* Configuration\n\n\nMacro                                   | Description\n----------------------------------------|-----------------------------------------\nMSM\\_POLICY\\_STATES\\_DST\\_SRC           | dst\\_state == src\\_state (same as in eUML)", 
            "title": "Tutorial"
        }, 
        {
            "location": "/user_guide/index.html", 
            "text": "make_transition_table\n\n\nDescription\n\n\nCreates transition table.\n\n\nSynopsis\n\n\ntemplate \nclass... Ts\n\nauto make_transition_table(Ts...) noexcept;\n\n\n\nSemantics\n\n\nmake_transition_table(transitions...);\n\n\n\nRequirements\n\n\n\n\n\n\n\n\nParameter\n\n\nRequirement\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nTs\n\n\ntransitional\n\n\ntransitions\n\n\nlist of transitions\n\n\n\n\n\n\n\n\nHeader\n\n\n#include \nboost/msm/msm.hpp\n\n\n\n\nExample\n\n\n\n\nConcepts.Transitional\n\n\nConcepts.Configurable\n\n\nConcepts.Callable\n\n\nConcepts.Dispatchable\n\n\nnamespace msm {\n    template \n // requires T to have T.configure()\n    class sm {\n    public:\n      using events; // list of supported events\n\n\n  template\nclass... TDeps\n // no requirements\n  explicit sm(TDeps\n...) noexcept; // action/guards dependencies\n  sm_impl(const sm \n) = delete;\n  sm_impl(sm \n) = default;\n\n  template \nclass TEvent\n // no requirements, returns whether event was handled or not\n  bool process_event(const TEvent \n) noexcept;\n\n  template \nclass TVisitor\n // requires TVisitor to be callable with auto\n  void visit_current_states(const TVisitor \n) const noexcept;\n\n  template \nclass TFlag\n // no requirements, returns whether active state has TFlag or not\n  bool is(const TFlag \n) const noexcept;\n};\n\ntemplate \nclass... Ts\n // requires Ts to have Ts::src_state\n                       //                   , Ts::dst_state\n                       //                   , Ts::event\n                       //                   , Ts::deps\n                       //                   , Ts.execute(...)\nauto make_transition_table(Ts...) noexcept;\n\naction process_event;\n\ntemplate \nclass TEvent\n // no requirements\nauto event{};\n\ntemplate \nclass T\n // no requirements\nusing state;\n\ntemplate \nclass T, T...\n\nstate\nT...\n operator\"\"_s(); // create a state, ex. \"idle\"_s\n\nstate initial;\n\ntemplate \nclass T\n // requires T to be callable and returns bool\nauto operator!(const T \n) noexcept;\n\ntemplate \nclass T1, class T2\n // requires T1, T2 to be callable and returns bool\nauto operator\n(const T1 \n, const T2 \n) noexcept;\n\ntemplate \nclass T1, class T2\n // requires T1, T2 to be callable and returns bool\nauto operator||(const T1 \n, const T2 \n) noexcept;\n\ntemplate \nclass T1, class T2\n // requires T1, T2 to be callable\nauto operator, (const T1 \nt1, const T2 \nt2) noexcept;\n\n\n\n}", 
            "title": "User Guide"
        }, 
        {
            "location": "/examples/index.html", 
            "text": "Hello World\n\n\n\n\nTransitions\n\n\n\n\nAction Guards\n\n\n\n\nStates\n\n\n\n\nEvents\n\n\n\n\nOrthogonal Regions\n\n\n\n\nComposite\n\n\n\n\neUML Emulation\n\n\n\n\nDependency Injection\n\n\n\n\nRuntime Dispatcher", 
            "title": "Examples"
        }, 
        {
            "location": "/CHANGELOG/index.html", 
            "text": "1.0.0\n - TBD\n\n\nAdded\n\n\n\n\nInitial version", 
            "title": "CHANGELOG"
        }, 
        {
            "location": "/CHANGELOG/index.html#100-tbd", 
            "text": "Added   Initial version", 
            "title": "1.0.0 - TBD"
        }, 
        {
            "location": "/TODO/index.html", 
            "text": "", 
            "title": "TODO"
        }
    ]
}